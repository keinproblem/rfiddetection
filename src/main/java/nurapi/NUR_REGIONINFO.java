package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * NUR_REGIONINFO holds information about specific region.
 * <br>
 *
 * @sa NurApiGetRegionInfo()<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:175</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_REGIONINFO extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_REGIONINFO() {
        super();
    }

    public NUR_REGIONINFO(Pointer pointer) {
        super(pointer);
    }

    /**
     * < Region name.<br>
     * C type : TCHAR[64]
     */
    @Array({64})
    @Field(0)
    public Pointer<Byte> name() {
        return this.io.getPointerField(this, 0);
    }

    /**
     * < Region ID.
     */
    @Field(1)
    public int regionId() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < Region ID.
     */
    @Field(1)
    public NUR_REGIONINFO regionId(int regionId) {
        this.io.setIntField(this, 1, regionId);
        return this;
    }

    /**
     * < RF base frequency in kHz.
     */
    @Field(2)
    public int baseFrequency() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < RF base frequency in kHz.
     */
    @Field(2)
    public NUR_REGIONINFO baseFrequency(int baseFrequency) {
        this.io.setIntField(this, 2, baseFrequency);
        return this;
    }

    /**
     * < RF channel spacing in kHz.
     */
    @Field(3)
    public int channelSpacing() {
        return this.io.getIntField(this, 3);
    }

    /**
     * < RF channel spacing in kHz.
     */
    @Field(3)
    public NUR_REGIONINFO channelSpacing(int channelSpacing) {
        this.io.setIntField(this, 3, channelSpacing);
        return this;
    }

    /**
     * < RF channel count.
     */
    @Field(4)
    public int channelCount() {
        return this.io.getIntField(this, 4);
    }

    /**
     * < RF channel count.
     */
    @Field(4)
    public NUR_REGIONINFO channelCount(int channelCount) {
        this.io.setIntField(this, 4, channelCount);
        return this;
    }

    /**
     * < Maximum RF channel on time.
     */
    @Field(5)
    public int channelTime() {
        return this.io.getIntField(this, 5);
    }

    /**
     * < Maximum RF channel on time.
     */
    @Field(5)
    public NUR_REGIONINFO channelTime(int channelTime) {
        this.io.setIntField(this, 5, channelTime);
        return this;
    }
}
