package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * Contains block permalocking information.
 * <br>
 *
 * @sa NurApiReadPermalock, NurApiReadPermalockByEPC, NurApiReadPermalockSingulated<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:521</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_PERMALOCK_PARAM extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_PERMALOCK_PARAM() {
        super();
    }

    public NUR_PERMALOCK_PARAM(Pointer pointer) {
        super(pointer);
    }

    /**
     * < Allowed range is 1...3.
     */
    @Field(0)
    public int bank() {
        return this.io.getIntField(this, 0);
    }

    /**
     * < Allowed range is 1...3.
     */
    @Field(0)
    public NUR_PERMALOCK_PARAM bank(int bank) {
        this.io.setIntField(this, 0, bank);
        return this;
    }

    /**
     * < Starting address for permalock. Start address is multiplied by 16 in order to get the first block number.
     */
    @Field(1)
    public int startAddr() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < Starting address for permalock. Start address is multiplied by 16 in order to get the first block number.
     */
    @Field(1)
    public NUR_PERMALOCK_PARAM startAddr(int startAddr) {
        this.io.setIntField(this, 1, startAddr);
        return this;
    }

    /**
     * < Number of blocks to lock. Also multiplied by 16 to get the number of lock WORDs.
     */
    @Field(2)
    public int range() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < Number of blocks to lock. Also multiplied by 16 to get the number of lock WORDs.
     */
    @Field(2)
    public NUR_PERMALOCK_PARAM range(int range) {
        this.io.setIntField(this, 2, range);
        return this;
    }

    /**
     * < Mask bits. Little-endian format.<br>
     * C type : WORD[255]
     */
    @Array({255})
    @Field(3)
    public Pointer<Short> wMask() {
        return this.io.getPointerField(this, 3);
    }
}
