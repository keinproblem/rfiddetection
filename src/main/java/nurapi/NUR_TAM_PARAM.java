package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * The ISO29167-10 authentication parameters for methods 1 and 2.<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:560</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_TAM_PARAM extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_TAM_PARAM() {
        super();
    }

    public NUR_TAM_PARAM(Pointer pointer) {
        super(pointer);
    }

    /**
     * < If TRUE then the method is 2 (TAM2 with custom data).
     */
    @Field(0)
    public int tam2() {
        return this.io.getIntField(this, 0);
    }

    /**
     * < If TRUE then the method is 2 (TAM2 with custom data).
     */
    @Field(0)
    public NUR_TAM_PARAM tam2(int tam2) {
        this.io.setIntField(this, 0, tam2);
        return this;
    }

    /**
     * < If TRUE then the contents are decrypted using the key. With TAM2 the contents are decrypted with key and using an IV (->CBC) from the first data block.
     */
    @Field(1)
    public int decrypt() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < If TRUE then the contents are decrypted using the key. With TAM2 the contents are decrypted with key and using an IV (->CBC) from the first data block.
     */
    @Field(1)
    public NUR_TAM_PARAM decrypt(int decrypt) {
        this.io.setIntField(this, 1, decrypt);
        return this;
    }

    /**
     * < Key number to use.
     */
    @Field(2)
    public int keyNum() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < Key number to use.
     */
    @Field(2)
    public NUR_TAM_PARAM keyNum(int keyNum) {
        this.io.setIntField(this, 2, keyNum);
        return this;
    }

    /**
     * < TAM2: Memory Profile Indicator. Basic indicator are: 0 = EPC, 1 = TID and 2 = user memory.
     */
    @Field(3)
    public int mpi() {
        return this.io.getIntField(this, 3);
    }

    /**
     * < TAM2: Memory Profile Indicator. Basic indicator are: 0 = EPC, 1 = TID and 2 = user memory.
     */
    @Field(3)
    public NUR_TAM_PARAM mpi(int mpi) {
        this.io.setIntField(this, 3, mpi);
        return this;
    }

    /**
     * < Encipherment mode.
     */
    @Field(4)
    public int protMode() {
        return this.io.getIntField(this, 4);
    }

    /**
     * < Encipherment mode.
     */
    @Field(4)
    public NUR_TAM_PARAM protMode(int protMode) {
        this.io.setIntField(this, 4, protMode);
        return this;
    }

    /**
     * < The block data's offset value in TAM2.
     */
    @Field(5)
    public int offset() {
        return this.io.getIntField(this, 5);
    }

    /**
     * < The block data's offset value in TAM2.
     */
    @Field(5)
    public NUR_TAM_PARAM offset(int offset) {
        this.io.setIntField(this, 5, offset);
        return this;
    }

    /**
     * < Number of custom data blocks. Allowed range is 1...4 (8...32 bytes as a result).
     */
    @Field(6)
    public int blockCount() {
        return this.io.getIntField(this, 6);
    }

    /**
     * < Number of custom data blocks. Allowed range is 1...4 (8...32 bytes as a result).
     */
    @Field(6)
    public NUR_TAM_PARAM blockCount(int blockCount) {
        this.io.setIntField(this, 6, blockCount);
        return this;
    }

    /**
     * < Key to use if response is decrypted.<br>
     * C type : BYTE[16]
     */
    @Array({16})
    @Field(7)
    public Pointer<Byte> key() {
        return this.io.getPointerField(this, 7);
    }
}
