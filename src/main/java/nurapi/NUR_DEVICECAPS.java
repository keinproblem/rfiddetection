package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * NUR_DEVICECAPS holds information about the connected module's capabilities.
 * <br>
 *
 * @sa NurApiGetDeviceCaps(), enum NUR_CHIPVER, enum NUR_MODULETYPE<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:225</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_DEVICECAPS extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_DEVICECAPS() {
        super();
    }

    public NUR_DEVICECAPS(Pointer pointer) {
        super(pointer);
    }

    /**
     * < Size of the structure
     */
    @Field(0)
    public int dwSize() {
        return this.io.getIntField(this, 0);
    }

    /**
     * < Size of the structure
     */
    @Field(0)
    public NUR_DEVICECAPS dwSize(int dwSize) {
        this.io.setIntField(this, 0, dwSize);
        return this;
    }

    /**
     * < Flag set 1
     */
    @Field(1)
    public int flagSet1() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < Flag set 1
     */
    @Field(1)
    public NUR_DEVICECAPS flagSet1(int flagSet1) {
        this.io.setIntField(this, 1, flagSet1);
        return this;
    }

    /**
     * < Flag set 2
     */
    @Field(2)
    public int flagSet2() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < Flag set 2
     */
    @Field(2)
    public NUR_DEVICECAPS flagSet2(int flagSet2) {
        this.io.setIntField(this, 2, flagSet2);
        return this;
    }

    /**
     * < Maximum TX level in dBm.
     */
    @Field(3)
    public int maxTxdBm() {
        return this.io.getIntField(this, 3);
    }

    /**
     * < Maximum TX level in dBm.
     */
    @Field(3)
    public NUR_DEVICECAPS maxTxdBm(int maxTxdBm) {
        this.io.setIntField(this, 3, maxTxdBm);
        return this;
    }

    /**
     * < TX level attenuation pre step in dBm.
     */
    @Field(4)
    public int txAttnStep() {
        return this.io.getIntField(this, 4);
    }

    /**
     * < TX level attenuation pre step in dBm.
     */
    @Field(4)
    public NUR_DEVICECAPS txAttnStep(int txAttnStep) {
        this.io.setIntField(this, 4, txAttnStep);
        return this;
    }

    /**
     * < Maximum TX level in mW.
     */
    @Field(5)
    public short maxTxmW() {
        return this.io.getShortField(this, 5);
    }

    /**
     * < Maximum TX level in mW.
     */
    @Field(5)
    public NUR_DEVICECAPS maxTxmW(short maxTxmW) {
        this.io.setShortField(this, 5, maxTxmW);
        return this;
    }

    /**
     * < Number of TX attenuation levels available.
     */
    @Field(6)
    public short txSteps() {
        return this.io.getShortField(this, 6);
    }

    /**
     * < Number of TX attenuation levels available.
     */
    @Field(6)
    public NUR_DEVICECAPS txSteps(short txSteps) {
        this.io.setShortField(this, 6, txSteps);
        return this;
    }

    /**
     * < Number of 96-bit EPCs that the module tag buffer can currently hold.
     */
    @Field(7)
    public short szTagBuffer() {
        return this.io.getShortField(this, 7);
    }

    /**
     * < Number of 96-bit EPCs that the module tag buffer can currently hold.
     */
    @Field(7)
    public NUR_DEVICECAPS szTagBuffer(short szTagBuffer) {
        this.io.setShortField(this, 7, szTagBuffer);
        return this;
    }

    /**
     * < Maximum number of antennas possible with current configuration.
     */
    @Field(8)
    public short curCfgMaxAnt() {
        return this.io.getShortField(this, 8);
    }

    /**
     * < Maximum number of antennas possible with current configuration.
     */
    @Field(8)
    public NUR_DEVICECAPS curCfgMaxAnt(short curCfgMaxAnt) {
        this.io.setShortField(this, 8, curCfgMaxAnt);
        return this;
    }

    /**
     * < Maximum number of GPIO pins possible with current configuration.
     */
    @Field(9)
    public short curCfgMaxGPIO() {
        return this.io.getShortField(this, 9);
    }

    /**
     * < Maximum number of GPIO pins possible with current configuration.
     */
    @Field(9)
    public NUR_DEVICECAPS curCfgMaxGPIO(short curCfgMaxGPIO) {
        this.io.setShortField(this, 9, curCfgMaxGPIO);
        return this;
    }

    /**
     * < RFID chip version. (enum NUR_CHIPVER)
     */
    @Field(10)
    public short chipVersion() {
        return this.io.getShortField(this, 10);
    }

    /**
     * < RFID chip version. (enum NUR_CHIPVER)
     */
    @Field(10)
    public NUR_DEVICECAPS chipVersion(short chipVersion) {
        this.io.setShortField(this, 10, chipVersion);
        return this;
    }

    /**
     * < Module type. (enum NUR_MODULETYPE)
     */
    @Field(11)
    public short moduleType() {
        return this.io.getShortField(this, 11);
    }

    /**
     * < Module type. (enum NUR_MODULETYPE)
     */
    @Field(11)
    public NUR_DEVICECAPS moduleType(short moduleType) {
        this.io.setShortField(this, 11, moduleType);
        return this;
    }

    /**
     * < Internal module config flags
     */
    @Field(12)
    public int moduleConfigFlags() {
        return this.io.getIntField(this, 12);
    }

    /**
     * < Internal module config flags
     */
    @Field(12)
    public NUR_DEVICECAPS moduleConfigFlags(int moduleConfigFlags) {
        this.io.setIntField(this, 12, moduleConfigFlags);
        return this;
    }

    /**
     * < Version 2 commands' support level.
     */
    @Field(13)
    public short v2Level() {
        return this.io.getShortField(this, 13);
    }

    /**
     * < Version 2 commands' support level.
     */
    @Field(13)
    public NUR_DEVICECAPS v2Level(short v2Level) {
        this.io.setShortField(this, 13, v2Level);
        return this;
    }

    /**
     * < The size left over of 128 bytes.<br>
     * C type : BYTE[128 - 4 * sizeof(DWORD) - 2 * sizeof(int) - 8 * sizeof(WORD)]
     */
    @Array({128 - 4 * 4 - 2 * 4 - 8 * 2})
    @Field(14)
    public Pointer<Byte> res() {
        return this.io.getPointerField(this, 14);
    }
}
