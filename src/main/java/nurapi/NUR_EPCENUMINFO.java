package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * Contains EPC enumeration information.
 * <br>
 *
 * @sa NurApiStartEPCEnumeration, NurApiStopEPCEnumeration<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:502</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_EPCENUMINFO extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_EPCENUMINFO() {
        super();
    }

    public NUR_EPCENUMINFO(Pointer pointer) {
        super(pointer);
    }

    /**
     * < Selected antenna
     */
    @Field(0)
    public int ant() {
        return this.io.getIntField(this, 0);
    }

    /**
     * < Selected antenna
     */
    @Field(0)
    public NUR_EPCENUMINFO ant(int ant) {
        this.io.setIntField(this, 0, ant);
        return this;
    }

    /**
     * < Word address of the TID data i.e. where to read the TID info
     */
    @Field(1)
    public int twAddr() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < Word address of the TID data i.e. where to read the TID info
     */
    @Field(1)
    public NUR_EPCENUMINFO twAddr(int twAddr) {
        this.io.setIntField(this, 1, twAddr);
        return this;
    }

    /**
     * < TID data word length.
     */
    @Field(2)
    public int twLen() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < TID data word length.
     */
    @Field(2)
    public NUR_EPCENUMINFO twLen(int twLen) {
        this.io.setIntField(this, 2, twLen);
        return this;
    }

    /**
     * < Block write type if any: 0 = no, 1 = one word, 2 = two words.
     */
    @Field(3)
    public int useBlWrite() {
        return this.io.getIntField(this, 3);
    }

    /**
     * < Block write type if any: 0 = no, 1 = one word, 2 = two words.
     */
    @Field(3)
    public NUR_EPCENUMINFO useBlWrite(int useBlWrite) {
        this.io.setIntField(this, 3, useBlWrite);
        return this;
    }

    /**
     * < Start value of the enumerated value in the EPC : equals to "unsigned long long" i.e. 64-bit unsigned integer.<br>
     * C type : BYTE[8]
     */
    @Array({8})
    @Field(4)
    public Pointer<Byte> startVal() {
        return this.io.getPointerField(this, 4);
    }

    /**
     * < EPC length in words; 4...8
     */
    @Field(5)
    public int epcLen() {
        return this.io.getIntField(this, 5);
    }

    /**
     * < EPC length in words; 4...8
     */
    @Field(5)
    public NUR_EPCENUMINFO epcLen(int epcLen) {
        this.io.setIntField(this, 5, epcLen);
        return this;
    }

    /**
     * < Base EPC value to be used and modified during the enumeration.<br>
     * C type : BYTE[16]
     */
    @Array({16})
    @Field(6)
    public Pointer<Byte> baseEPC() {
        return this.io.getPointerField(this, 6);
    }

    /**
     * < Bit address where the enumerated value is located in the EPC memory
     */
    @Field(7)
    public int modAddr() {
        return this.io.getIntField(this, 7);
    }

    /**
     * < Bit address where the enumerated value is located in the EPC memory
     */
    @Field(7)
    public NUR_EPCENUMINFO modAddr(int modAddr) {
        this.io.setIntField(this, 7, modAddr);
        return this;
    }

    /**
     * < Bit length of the modified value: 1...64
     */
    @Field(8)
    public int bitLen() {
        return this.io.getIntField(this, 8);
    }

    /**
     * < Bit length of the modified value: 1...64
     */
    @Field(8)
    public NUR_EPCENUMINFO bitLen(int bitLen) {
        this.io.setIntField(this, 8, bitLen);
        return this;
    }

    /**
     * < If non-zero then the current TID information is cleared
     */
    @Field(9)
    public int bReset() {
        return this.io.getIntField(this, 9);
    }

    /**
     * < If non-zero then the current TID information is cleared
     */
    @Field(9)
    public NUR_EPCENUMINFO bReset(int bReset) {
        this.io.setIntField(this, 9, bReset);
        return this;
    }
}
