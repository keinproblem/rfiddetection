package nurapi;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;

/**
 * The ISO29167-10 authentication response for methods 1 and 2.<br>
 * <i>native declaration : nur_sdk-master\native\include\NurAPI.h:572</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("NurApi")
public class NUR_TAM_RESP extends StructObject {
    static {
        BridJ.register();
    }

    public NUR_TAM_RESP() {
        super();
    }

    public NUR_TAM_RESP(Pointer pointer) {
        super(pointer);
    }

    /**
     * < There is a response present.
     */
    @Field(0)
    public int response() {
        return this.io.getIntField(this, 0);
    }

    /**
     * < There is a response present.
     */
    @Field(0)
    public NUR_TAM_RESP response(int response) {
        this.io.setIntField(this, 0, response);
        return this;
    }

    /**
     * < The response is decrypted, C_TAM matches and challenge contents was OK.
     */
    @Field(1)
    public int ok() {
        return this.io.getIntField(this, 1);
    }

    /**
     * < The response is decrypted, C_TAM matches and challenge contents was OK.
     */
    @Field(1)
    public NUR_TAM_RESP ok(int ok) {
        this.io.setIntField(this, 1, ok);
        return this;
    }

    /**
     * < The 16-bit constant in the first block.
     */
    @Field(2)
    public int C_TAM() {
        return this.io.getIntField(this, 2);
    }

    /**
     * < The 16-bit constant in the first block.
     */
    @Field(2)
    public NUR_TAM_RESP C_TAM(int C_TAM) {
        this.io.setIntField(this, 2, C_TAM);
        return this;
    }

    /**
     * < The following 32-bit random value in the first block.
     */
    @Field(3)
    public int TRnd32() {
        return this.io.getIntField(this, 3);
    }

    /**
     * < The following 32-bit random value in the first block.
     */
    @Field(3)
    public NUR_TAM_RESP TRnd32(int TRnd32) {
        this.io.setIntField(this, 3, TRnd32);
        return this;
    }

    /**
     * < Bytes actually in the block data.
     */
    @Field(4)
    public int szBlocks() {
        return this.io.getIntField(this, 4);
    }

    /**
     * < Bytes actually in the block data.
     */
    @Field(4)
    public NUR_TAM_RESP szBlocks(int szBlocks) {
        this.io.setIntField(this, 4, szBlocks);
        return this;
    }

    /**
     * < The challenge used in TAM1 or 2.<br>
     * C type : BYTE[(80 / 8)]
     */
    @Array({80 / 8})
    @Field(5)
    public Pointer<Byte> challenge() {
        return this.io.getPointerField(this, 5);
    }

    /**
     * < Decrypted or raw contents of the first block.<br>
     * C type : BYTE[16]
     */
    @Array({16})
    @Field(6)
    public Pointer<Byte> firstBlock() {
        return this.io.getPointerField(this, 6);
    }

    /**
     * < Block data if custom data was requested.<br>
     * C type : BYTE[4 * 8]
     */
    @Array({4 * 8})
    @Field(7)
    public Pointer<Byte> blockData() {
        return this.io.getPointerField(this, 7);
    }

    /**
     * < CMAC data if protection mode 2,3.<br>
     * C type : BYTE[12]
     */
    @Array({12})
    @Field(8)
    public Pointer<Byte> cmac() {
        return this.io.getPointerField(this, 8);
    }
}
